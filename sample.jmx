<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="WebDriver test plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1363247040000</longProp>
        <longProp name="ThreadGroup.end_time">1363247040000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
      </ThreadGroup>
      <hashTree>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Login" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var wait = new support_ui.WebDriverWait(WDS.browser, 5000)

var url = &apos;http://localhost&apos;
var login = &apos;user&apos;;
var pass = &apos;password&apos;;

WDS.browser.get(url)

var field = WDS.browser.findElement(pkg.By.name(&apos;txtLogin&apos;))
field.click()
field.sendKeys([login])

field = WDS.browser.findElement(pkg.By.name(&apos;txtPassword&apos;))
field.click()
field.sendKeys([pass])

WDS.sampleResult.sampleStart()
WDS.browser.findElement(pkg.By.name(&apos;Login.Submit&apos;)).click()
wait.until(conditions.elementToBeClickable(pkg.By.partialLinkText(&apos;Home&apos;)))
WDS.sampleResult.sampleEnd()

WDS.log.info(WDS.name + &apos; has logged an entry&apos;);

</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Template Test Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var tu = JavaImporter(java.util.concurrent.TimeUnit)
var actions = JavaImporter(org.openqa.selenium.interactions.Actions)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var wait = new support_ui.WebDriverWait(WDS.browser, 30000)
var samplers = JavaImporter(org.apache.jmeter.samplers)
var keys = JavaImporter(org.openqa.selenium.Keys)

var noAttempts = 15;
    
WDS.browser.manage().timeouts().implicitlyWait(60, tu.TimeUnit.SECONDS)

function waitInteractiveState(id)
{
    WDS.browser.manage().timeouts().implicitlyWait(0, tu.TimeUnit.SECONDS)
    wait.until(conditions.invisibilityOfElementLocated(pkg.By.className(&apos;ajax_loader&apos;)))
    WDS.browser.manage().timeouts().implicitlyWait(60, tu.TimeUnit.SECONDS)
    timestamp = WDS.browser.executeScript(&quot;return window.performance.now();&quot;);
    requestStart = WDS.browser.executeScript(&quot;return window.performance.timing.requestStart;&quot;);
    responseStart = WDS.browser.executeScript(&quot;return window.performance.timing.responseStart;&quot;);
    responseEnd = WDS.browser.executeScript(&quot;return window.performance.timing.responseEnd;&quot;);

    pageSampleResult = samplers.SampleResult(timestamp, responseEnd - responseStart);
    pageSampleResult.setSampleLabel(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+id);
    WDS.sampleResult.addRawSubResult(pageSampleResult);
}

function waitActive()
{
    WDS.browser.manage().timeouts().implicitlyWait(0, tu.TimeUnit.SECONDS)
    wait.until(conditions.invisibilityOfElementLocated(pkg.By.className(&apos;ajax_loader&apos;)))
    WDS.browser.manage().timeouts().implicitlyWait(60, tu.TimeUnit.SECONDS)
}

function moveto(field)
{
    WDS.browser.executeScript(&quot;arguments[0].scrollIntoView(false);&quot;, field);
}

function moveleft()
{
    WDS.browser.executeScript(&quot;window.scrollBy(-window.width,0)&quot;, &quot;&quot;);
}


function hide(id)
{
    field = WDS.browser.findElement(pkg.By.id(id))
    WDS.browser.executeScript(&quot;arguments[0].setAttribute(&apos;style&apos;, &apos;display:none;&apos;)&quot;, field);
}

function page(id)
{
    WDS.browser.manage().timeouts().implicitlyWait(60, tu.TimeUnit.SECONDS)
    wait.until(conditions.visibilityOfElementLocated(pkg.By.id(id)));
    
    field = WDS.browser.findElement(pkg.By.id(id))
    moveto(field)

    var attempt = 0;
    var exceptionFlag = false;
    
    WDS.browser.manage().timeouts().implicitlyWait(0, tu.TimeUnit.SECONDS)
    while (attempt &lt; noAttempts) {
        try {
            exceptionFlag = false;
            WDS.log.info(&quot;Page click &quot; + id);
	        field.click()
        } catch (err) {
            exceptionFlag = true;
            attempt++;
            field = reGetControl(id)
            WDS.log.warn(err);
        } finally {
            if (!exceptionFlag) attempt = noAttempts;
        }
        WDS.log.info(&quot;Attempt &quot; + attempt);
    }
    
	waitInteractiveState(id)
    WDS.log.info(&quot;Page button: &quot; + id);
    
    WDS.browser.manage().timeouts().implicitlyWait(0, tu.TimeUnit.SECONDS)

}

function reGetControl(id)
{
    wait.until(conditions.visibilityOfElementLocated(pkg.By.id(id)));
    field = WDS.browser.findElement(pkg.By.id(id))
    moveto(field)
    
    return field
}

function preControl(id, text)
{
    WDS.browser.manage().timeouts().implicitlyWait(60, tu.TimeUnit.SECONDS)
    wait.until(conditions.visibilityOfElementLocated(pkg.By.id(id)));

    field = WDS.browser.findElement(pkg.By.id(id))
    moveto(field)
        
    WDS.sampleResult.subSampleStart(text)

    waitActive()
    return field
}


function preControlXpath(id, controlXpath, text)
{
    WDS.browser.manage().timeouts().implicitlyWait(60, tu.TimeUnit.SECONDS)
    wait.until(conditions.visibilityOfElementLocated(pkg.By.id(id)));
    
    fieldSize = WDS.browser.findElements(pkg.By.xpath(controlXpath)).size();
    field = WDS.browser.findElements(pkg.By.xpath(controlXpath)).get(fieldSize - 1);

    moveto(field)
    WDS.sampleResult.subSampleStart(text)
    waitActive()  
    return field
}

function postControl(id, field, text)
{
    moveleft()

    var attempt = 0;
    var exceptionFlag = false;
    
    WDS.browser.manage().timeouts().implicitlyWait(0, tu.TimeUnit.SECONDS)
    while (attempt &lt; noAttempts) {
        try {
            exceptionFlag = false;
            WDS.log.info(&quot;PostControl send tab&quot;);
        	field.sendKeys([&apos;\t&apos;])
        } catch (err) {
            exceptionFlag = true;
            attempt++;
            field = reGetControl(id)
            WDS.log.warn(err);
        } finally {
            if (!exceptionFlag) attempt = noAttempts;
        }
        WDS.log.info(&quot;Attempt &quot; + attempt);
    }
    waitActive()

    WDS.sampleResult.subSampleEnd(true)
    WDS.log.info(text);
    
    WDS.browser.manage().timeouts().implicitlyWait(0, tu.TimeUnit.SECONDS)
}

function text(id, value)
{
    field = preControl(id, &quot;Text &quot; + id + &quot; = &quot; + value)

    var attempt = 0;
    var exceptionFlag = false;
    
    WDS.browser.manage().timeouts().implicitlyWait(0, tu.TimeUnit.SECONDS)
    while (attempt &lt; noAttempts) {
        try {
            exceptionFlag = false;
            WDS.log.info(&quot;Send keys &quot; + id + &quot; &quot; + value);
            field.sendKeys([value])
        } catch (err) {
            exceptionFlag = true;
            attempt++;
            field = reGetControl(id)
            WDS.log.warn(err);
        } finally {
            if (!exceptionFlag) attempt = noAttempts;
        }
        WDS.log.info(&quot;Attempt &quot; + attempt);
    }

    postControl(id, field, &quot;Action text: &quot; + id + &quot; = &quot; + value)
}

function button(id)
{
    field = preControl(id, &quot;Button click &quot; + id)

    var attempt = 0;
    var exceptionFlag = false;

    WDS.browser.manage().timeouts().implicitlyWait(0, tu.TimeUnit.SECONDS)
    while (attempt &lt; noAttempts) {
        try {
            exceptionFlag = false;
            WDS.log.info(&quot;Click &quot; + id);
        	field.click()
        } catch (err) {
            exceptionFlag = true;
            attempt++;
            field = reGetControl(id)
            WDS.log.warn(err);
        } finally {
            if (!exceptionFlag) attempt = noAttempts;
        }
        WDS.log.info(&quot;Attempt &quot; + attempt);
    }


    postControl(id, field, &quot;Action button: &quot; + id)
}

function select(id, value)
{
    field = preControl(id, &quot;Select &quot; + id + &quot; = &quot; + value)

    var attempt = 0;
    var exceptionFlag = false;
    
    WDS.browser.manage().timeouts().implicitlyWait(0, tu.TimeUnit.SECONDS)
    while (attempt &lt; noAttempts) {
        try {
            exceptionFlag = false;
            WDS.log.info(&quot;Select &quot; + id + &quot; &quot; + value);
            var select = new org.openqa.selenium.support.ui.Select(field)
            wait.until(conditions.visibilityOfElementLocated(pkg.By.id(id)));
            select.selectByVisibleText(value)
        } catch (err) {
            exceptionFlag = true;
            attempt++;
            field = reGetControl(id)
            WDS.log.warn(err);
        } finally {
            if (!exceptionFlag) attempt = noAttempts;
        }
        WDS.log.info(&quot;Attempt &quot; + attempt);
    }


    postControl(id, field, &quot;Action select: &quot; + id + &quot; = &quot; + value)
}

function radio(id, num)
{
    field = preControlXpath(id, &quot;(//div[@id=&apos;&quot; + id + &quot;&apos;]/descendant::node()[@type=&apos;radio&apos;])[&quot; + num + &quot;]&quot;, &quot;Radio &quot; + id + &quot; = &quot; + num)    

    var attempt = 0;
    var exceptionFlag = false;
    
    WDS.browser.manage().timeouts().implicitlyWait(0, tu.TimeUnit.SECONDS)
    while (attempt &lt; noAttempts) {
        try {
            exceptionFlag = false;
            WDS.log.info(&quot;Radio &quot; + id);
        	field.click()
        } catch (err) {
            exceptionFlag = true;
            attempt++;
            field = reGetControl(id)
            WDS.log.warn(err);
        } finally {
            if (!exceptionFlag) attempt = noAttempts;
        }
        WDS.log.info(&quot;Attempt &quot; + attempt);
    }

    postControl(id, field, &quot;Action radio: &quot; + id + &quot; = &quot; + num)
}

function checkbox(id)
{
    field = preControlXpath(id, &quot;//div[@id=&apos;&quot; + id + &quot;&apos;]/descendant::node()[@type=&apos;checkbox&apos;]&quot;, &quot;Checkbox click &quot; + id)    
    
    var attempt = 0;
    var exceptionFlag = false;
    
    WDS.browser.manage().timeouts().implicitlyWait(0, tu.TimeUnit.SECONDS)
    while (attempt &lt; noAttempts) {
        try {
            exceptionFlag = false;
            WDS.log.info(&quot;Checkbox &quot; + id);
        	field.click()
        } catch (err) {
            exceptionFlag = true;
            attempt++;
            field = reGetControl(id)
            WDS.log.warn(err);
        } finally {
            if (!exceptionFlag) attempt = noAttempts;
        }
        WDS.log.info(&quot;Attempt &quot; + attempt);
    }

    postControl(id, field, &quot;Action checkbox: &quot; + id)
}

function date(id, value)
{
    field = preControlXpath(id, &quot;//div[@id=&apos;&quot; + id + &quot;&apos;]/descendant::node()//input&quot;, &quot;Date &quot; + id + &quot; = &quot; + value)        

    var attempt = 0;
    var exceptionFlag = false;
    
    WDS.browser.manage().timeouts().implicitlyWait(0, tu.TimeUnit.SECONDS)
    while (attempt &lt; noAttempts) {
        try {
            exceptionFlag = false;
            WDS.log.info(&quot;Date &quot; + id);
            field.sendKeys([org.openqa.selenium.Keys.HOME]);
            field.sendKeys([org.openqa.selenium.Keys.INSERT]);
	        field.sendKeys([value]);
            field.sendKeys([org.openqa.selenium.Keys.INSERT]);
            field.sendKeys([&apos;\t&apos;]);
        } catch (err) {
            exceptionFlag = true;
            attempt++;
            field = reGetControl(id)
            WDS.log.warn(err);
        } finally {
            if (!exceptionFlag) attempt = noAttempts;
        }
        WDS.log.info(&quot;Attempt &quot; + attempt);
    }


    postControl(id, field, &quot;Action date: &quot; + id + &quot; = &quot; + value)
}

function finalize()
{
    WDS.sampleResult.subSampleStart(&apos;************* Page finalized&apos;)
    WDS.sampleResult.subSampleEnd(true)
    WDS.log.info(&apos;************* Page finalized&apos;);
}

WDS.sampleResult.sampleStart();

page(&apos;UserDataPage&apos;)
text(&apos;name&apos;, &apos;Test name&apos;);
select(&apos;language&apos;, &apos;English&apos;) 			
radio(&apos;employment&apos;, 2)
checkbox(&apos;hasCard&apos;)
date(&apos;birthDate&apos;, &apos;10-10-1980&apos;)
button(&apos;goButton&apos;)
    
WDS.sampleResult.sampleEnd()

WDS.browser.manage().timeouts().implicitlyWait(0, tu.TimeUnit.SECONDS);

finalize()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">C:\_Soft\apache-jmeter-2.13\bin\ChromeDriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.FirefoxDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.FirefoxDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.FirefoxDriverConfig" testname="jp@gc - Firefox Driver Config" enabled="false">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <boolProp name="FirefoxDriverConfig.general.useragent.override.enabled">false</boolProp>
          <boolProp name="FirefoxDriverConfig.network.negotiate-auth.allow-insecure-ntlm-v1">false</boolProp>
          <collectionProp name="FirefoxDriverConfig.general.extensions"/>
          <collectionProp name="FirefoxDriverConfig.general.preferences"/>
        </com.googlecode.jmeter.plugins.webdriver.config.FirefoxDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.InternetExplorerDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.InternetExplorerDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.InternetExplorerDriverConfig" testname="jp@gc - Internet Explorer Driver Config" enabled="false">
          <stringProp name="WebDriverConfig.proxy_type">DIRECT</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="InternetExplorerDriverConfig.iedriver_path">C:\_Soft\apache-jmeter-2.13\bin\IEDriverServer.exe</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.config.InternetExplorerDriverConfig>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
